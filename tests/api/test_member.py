import copy
from random import randint

import time
from datetime import date, timedelta, datetime

import pytest
import requests

DEVICE_SERIAL_NO = "121EC1-0D1FCB-0000FF"
# 默认参照账户
default_person = {
    "person_id": "2023020512563323845",
    "phone": "shingler",
    "reg_image": "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",

}
# 注册成功的账号（便于修改和删除）
success_persons = []


def test_add(init_app):
    person_id_for_test = datetime.now().strftime("%Y%m%d%H%M")
    url = init_app.config["API_ADDR"] + "/member/add"
    term_days = 30
    term_end = date.today() + timedelta(days=term_days)
    param_correct = {
        "device_no": DEVICE_SERIAL_NO,
        "person_id": person_id_for_test,
        "phone": "18611106295",
        "reg_image": "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",
        "term_start": time.strftime('%Y-%m-%d %H:%M:%S'),
        "term_end": term_end.strftime("%Y-%m-%d 23:59:59"),
        "display_name": "老乐",
        "kind": 0,
    }

    # 设备号为空
    param1 = {}
    res1 = requests.post(url, param1)
    assert res1.status_code == 200
    assert res1.json()["status"] == 10001

    # 设备号不存在
    param2 = {"device_no": "123456"}
    res2 = requests.post(url, param2)
    assert res2.status_code == 200
    assert res2.json()["status"] == 20001

    # 人员id为空
    param9 = copy.deepcopy(param_correct)
    param9["person_id"] = ""
    res9 = requests.post(url, param9)
    assert res9.status_code == 200
    res9 = res9.json()
    assert res9["status"] == 10005

    # 手机号为空
    param3 = copy.deepcopy(param_correct)
    param3["phone"] = ""
    res3 = requests.post(url, param3)
    assert res3.status_code == 200
    assert res3.json()["status"] == 10003

    # 人像为空
    param4 = copy.deepcopy(param_correct)
    param4["reg_image"] = ""
    res4 = requests.post(url, param4)
    assert res4.status_code == 200
    assert res4.json()["status"] == 10004

    # 手机号已存在
    param5 = copy.deepcopy(param_correct)
    param5["phone"] = default_person["phone"]
    res5 = requests.post(url, param5)
    assert res5.status_code == 200
    assert res5.json()["status"] == 30002

    # 人员id已存在
    param6 = copy.deepcopy(param_correct)
    param6["person_id"] = default_person["person_id"]
    res6 = requests.post(url, param6)
    assert res6.status_code == 200
    assert res6.json()["status"] == 30002

    # 有效期结束时间小于开始时间
    param7 = copy.deepcopy(param_correct)
    term_end = date.today()-timedelta(days=2)
    param7["term_end"] = term_end.strftime("%Y-%m-%d 23:59:59")
    res7 = requests.post(url, param7)
    assert res7.status_code == 200
    assert res7.json()["status"] == 30005

    # 超过指定范围的kind
    param8 = copy.deepcopy(param_correct)
    param8["kind"] = 36
    res8 = requests.post(url, param8)
    assert res8.status_code == 200
    assert res8.json()["status"] == 30006

    # 非人脸图像
    param14 = copy.deepcopy(param_correct)
    param14["phone"] = "test for picture without person\'s face"
    param14["reg_image"] = ""
    res14 = requests.post(url, param14)
    assert res14.status_code == 200
    assert res14.json()["status"] == 25

    # 正常注册
    param8 = copy.deepcopy(param_correct)
    res8 = requests.post(url, param8)
    assert res8.status_code == 200
    res8 = res8.json()
    assert res8["status"] == 0
    assert len(res8["result"]["id"]) > 0
    # 记录id
    success_persons.append(res8["result"]["id"])

    # 其他参数验证（不影响流程，仅验证结果）

    # 有效期开始为空（人员id置空是为了方便测试删除，顺便清理测试数据）
    param10 = copy.deepcopy(param_correct)
    param10["person_id"] = person_id_for_test + str(randint(1, 100))
    param10["phone"] = "test for empty term start"
    param10["term_start"] = ""
    print(param10)
    res10 = requests.post(url, param10)
    assert res10.status_code == 200
    res10 = res10.json()
    assert res10["status"] == 0
    assert res10["result"]["code"] == 0
    assert len(res10["result"]["id"]) > 0
    # 记录id
    success_persons.append(res10["result"]["id"])

    # 有效期结束为空（人员id置空是为了方便测试删除，顺便清理测试数据）
    param11 = copy.deepcopy(param_correct)
    param11["person_id"] = person_id_for_test + str(randint(1, 100))
    param11["phone"] = "test for empty term end"
    param11["term_end"] = ""
    res11 = requests.post(url, param11)
    assert res11.status_code == 200
    res11 = res11.json()
    assert res11["status"] == 0
    assert res11["result"]["code"] == 0
    assert len(res11["result"]["id"]) > 0
    # 记录id
    success_persons.append(res11["result"]["id"])

    # 显示姓名为空（人员id置空是为了方便测试删除，顺便清理测试数据）
    param12 = copy.deepcopy(param_correct)
    param12["person_id"] = person_id_for_test + str(randint(1, 100))
    param12["phone"] = "test for empty display name"
    param12["display_name"] = ""
    res12 = requests.post(url, param12)
    assert res12.status_code == 200
    res12 = res12.json()
    assert res12["status"] == 0
    assert res12["result"]["code"] == 0
    assert len(res12["result"]["id"]) > 0
    # 记录id
    success_persons.append(res12["result"]["id"])

    # 相同的人像（设备pc端开启了禁止重复人脸注册时）
    # param13 = copy.deepcopy(param_correct)
    # param13["reg_image"] = default_person["reg_image"]
    # res13 = requests.post(url, param13)
    # assert res13.status_code == 200
    # assert res13.json()["status"] == 16


def test_modify(init_app):
    param_correct = {
        "device_no": DEVICE_SERIAL_NO,
        "person_id": ""
    }
    url = init_app.config["API_ADDR"] + "/member/modify"
    # 设备号为空
    param1 = {"device_no": ""}
    res1 = requests.post(url, param1)
    assert res1.status_code == 200
    assert res1.json()["status"] == 10001

    # 设备号不存在
    param2 = {"device_no": "123456"}
    res2 = requests.post(url, param2)
    assert res2.status_code == 200
    assert res2.json()["status"] == 20001

    # 人员id为空
    param3 = copy.deepcopy(param_correct)
    param3["person_id"] = ""
    res3 = requests.post(url, param3)
    assert res3.status_code == 200
    res3 = res3.json()
    assert res3["status"] == 10005

    # id不存在
    param4 = copy.deepcopy(param_correct)
    param4["person_id"] = "111"
    res4 = requests.post(url, param4)
    assert res4.status_code == 200
    assert res4.json()["status"] == 30001

    # 要修改的手机号已存在
    param5 = copy.deepcopy(param_correct)
    param5["person_id"] = default_person["person_id"]
    param5["phone"] = default_person["phone"]

    res5 = requests.post(url, param5)
    assert res5.status_code == 200
    assert res5.json()["status"] == 30002

    # 下面的逻辑为各种情况的修改测试
    # success_persons.append(202302060002)

    if len(success_persons) == 0:
        pytest.exit(reason="无数据")

    print(success_persons)
    for pid in success_persons:
        print("modify %s" % pid)
        param6 = copy.deepcopy(param_correct)
        param6["person_id"] = pid
        # 将到期时间改为从现在开始的10天以后
        term_end_dt = datetime.now() + timedelta(days=90)
        param6["term_end"] = term_end_dt.strftime("%Y-%m-%d %H:%M:%S")
        # 将自定义名称改为四位随机数
        param6["display_name"] = str(randint(1000,9999))

        res6 = requests.post(url, param6)
        assert res6.status_code == 200
        assert res6.json()["status"] == 0


def test_check(init_app):
    url = init_app.config["API_ADDR"]+"/member/get"
    param_correct = {
        "device_no": DEVICE_SERIAL_NO,
        "person_id": "2023020512563323845",
        "phone": "shingler"
    }

    # 设备号为空
    param1 = {}
    res1 = requests.post(url, param1)
    assert res1.status_code == 200
    assert res1.json()["status"] == 10001

    # 设备号不存在
    param2 = {"device_no": "123456"}
    res2 = requests.post(url, param2)
    assert res2.status_code == 200
    assert res2.json()["status"] == 20001

    # 人员id及姓名均为空
    param3 = {"device_no": DEVICE_SERIAL_NO}
    res3 = requests.post(url, param3)
    assert res3.status_code == 200
    assert res3.json()["status"] == 10002

    # 人员id为空，人员姓名不为空且不存在
    param4 = copy.deepcopy(param_correct)
    param4["person_id"] = None
    param4["phone"] = "aaa"
    res4 = requests.post(url, param4)
    assert res4.status_code == 200
    assert res4.json()["status"] == 30001

    # 人员id为空，人员姓名不为空且存在
    param5 = copy.deepcopy(param_correct)
    param5["person_id"] = None
    res5 = requests.post(url, param5)
    assert res5.status_code == 200
    res5 = res5.json()
    assert res5["status"] == 0
    assert len(res5["result"]) > 0
    assert res5["result"][0]["id"] == param_correct["person_id"]

    # 人员姓名为空，人员id不为空且不存在
    param6 = copy.deepcopy(param_correct)
    param6["phone"] = None
    param6["person_id"] = "111"
    res6 = requests.post(url, param6)
    assert res6.status_code == 200
    assert res6.json()["status"] == 30001

    # 人员姓名为空，人员id不为空且存在
    param7 = copy.deepcopy(param_correct)
    param7["phone"] = None
    res7 = requests.post(url, param7)
    assert res7.status_code == 200
    res7 = res7.json()
    assert res7["status"] == 0
    assert len(res7["result"]) > 0
    assert res7["result"][0]["name"] == param_correct["phone"]

    # 人员姓名及id均不为空且不存在
    param8 = copy.deepcopy(param_correct)
    param8["person_id"] = "111"
    param8["phone"] = "aaa"
    res8 = requests.post(url, param8)
    assert res8.status_code == 200
    assert res8.json()["status"] == 30001

    # 人员姓名及id均不为空且存在但不对应
    param9 = copy.deepcopy(param_correct)
    param9["person_id"] = "202302060002"
    res9 = requests.post(url, param9)
    assert res9.status_code == 200
    assert res9.json()["status"] == 30001

    # 人员姓名及id均不为空且存在并对应
    param10 = copy.deepcopy(param_correct)
    res10 = requests.post(url, param10)
    assert res10.status_code == 200
    res10 = res10.json()
    assert res10["status"] == 0
    assert len(res10["result"]) > 0
    assert res10["result"][0]["name"] == param_correct["phone"]


def test_delete(init_app):
    param_correct = {
        "device_no": DEVICE_SERIAL_NO,
        "person_id": ""
    }
    url = init_app.config["API_ADDR"] + "/member/delete"
    # 设备号为空
    param1 = {"device_no": ""}
    res1 = requests.post(url, param1)
    assert res1.status_code == 200
    assert res1.json()["status"] == 10001

    # 设备号不存在
    param2 = {"device_no": "123456"}
    res2 = requests.post(url, param2)
    assert res2.status_code == 200
    assert res2.json()["status"] == 20001

    # 人员id为空
    param3 = copy.deepcopy(param_correct)
    param3["person_id"] = ""
    res3 = requests.post(url, param3)
    assert res3.status_code == 200
    res3 = res3.json()
    assert res3["status"] == 10005

    # id不存在
    param4 = copy.deepcopy(param_correct)
    param4["person_id"] = "111"
    res4 = requests.post(url, param4)
    assert res4.status_code == 200
    assert res4.json()["status"] == 30001

    # 删除
    if len(success_persons) == 0:
        pytest.exit(reason="无数据")

    print(success_persons)
    for pid in success_persons:
        print("deleting %s" % pid)
        param5 = copy.deepcopy(param_correct)
        param5["person_id"] = pid
        res5 = requests.post(url, param5)
        assert res5.status_code == 200
        assert res5.json()["status"] == 0